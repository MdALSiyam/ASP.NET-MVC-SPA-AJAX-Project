@model MVCMasterDetailsSPA.ViewModels.StudentViewModel

<div class="modal-header bg-primary text-white">
    <h5 class="modal-title"><i class="bi bi-person-plus-fill me-2"></i> Add New Student</h5>
    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
</div>
<div class="modal-body">
    @using (Html.BeginForm("CreateStudent", "Students", FormMethod.Post, new { id = "createStudentForm", enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="row">
            <div class="col-md-7">
                <h4 class="mb-3 text-info"><i class="bi bi-info-circle-fill me-2"></i> Student Information</h4>
                <div class="mb-3">
                    @Html.LabelFor(model => model.StudentName, htmlAttributes: new { @class = "form-label" })
                    @Html.EditorFor(model => model.StudentName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.StudentName, "", new { @class = "text-danger" })
                </div>
                <div class="mb-3">
                    @Html.LabelFor(model => model.AdmissionDate, htmlAttributes: new { @class = "form-label" })
                    @Html.EditorFor(model => model.AdmissionDate, new { htmlAttributes = new { @class = "form-control", type = "date" } })
                    @Html.ValidationMessageFor(model => model.AdmissionDate, "", new { @class = "text-danger" })
                </div>
                <div class="mb-3">
                    @Html.LabelFor(model => model.MobileNo, htmlAttributes: new { @class = "form-label" })
                    @Html.EditorFor(model => model.MobileNo, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.MobileNo, "", new { @class = "text-danger" })
                </div>
                <div class="mb-3 form-check">
                    @Html.EditorFor(model => model.IsEnrolled, new { htmlAttributes = new { @class = "form-check-input" } })
                    @Html.LabelFor(model => model.IsEnrolled, htmlAttributes: new { @class = "form-check-label" })
                    @Html.ValidationMessageFor(model => model.IsEnrolled, "", new { @class = "text-danger" })
                </div>
                <div class="mb-3">
                    @Html.LabelFor(model => model.CourseId, htmlAttributes: new { @class = "form-label" })
                    @Html.DropDownListFor(model => model.CourseId, new SelectList(Model.Courses, "CourseId", "CourseName"), "Select Course", new { @class = "form-select" })
                    @Html.ValidationMessageFor(model => model.CourseId, "", new { @class = "text-danger" })
                </div>
                <div class="mb-3">
                    <label for="ProfileFile" class="form-label">Profile Image</label><br />
                    <img id="imageFile" src="@Url.Content("~/images/noimage.png")" alt="image" class="img-thumbnail mb-2" style="max-width: 100px; max-height: 100px;" />
                    <input onchange="readUrl(this)" type="file" name="ProfileFile" id="ProfileFile" class="form-control" accept="image/*" />
                </div>
            </div>
            <div class="col-md-5">
                <h4 class="mb-3 text-success"><i class="bi bi-list-check me-2"></i> Module Information</h4>
                <button onclick="AddModule()" type="button" class="btn btn-success btn-sm mb-2"><i class="bi bi-plus-lg me-1"></i> Add Module</button>
                <div class="table-responsive">
                    <table class="table table-bordered table-sm" id="ExTable">
                        <thead class="table-secondary">
                            <tr>
                                <th>Module</th>
                                <th>Duration</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.CourseModules != null && Model.CourseModules.Any())
                            {
                                for (int i = 0; i < Model.CourseModules.Count(); i++)
                                {
                                    <tr>
                                        <td>
                                            @Html.TextBoxFor(m => m.CourseModules[i].ModuleName, new { @class = "form-control form-control-sm" })
                                        </td>
                                        <td>
                                            @Html.TextBoxFor(m => m.CourseModules[i].Duration, new { @class = "form-control form-control-sm" })
                                        </td>
                                        <td>
                                            <button onclick="deleteRow(this)" type="button" class="btn btn-danger btn-sm"> Delete</button>
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
                <input type="hidden" id="HIndex" value="@(Model.CourseModules != null ? Model.CourseModules.Count() : 0)" />
            </div>
        </div>

        <div class="modal-footer justify-content-between">
            <button type="submit" class="btn btn-primary"><i class="bi bi-check-circle-fill me-2"></i> Save Student</button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal"><i class="bi bi-x-circle me-2"></i> Close</button>
        </div>
    }
</div>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
<script src="~/Scripts/jquery-3.7.1.min.js"></script>
<script>
    function readUrl(i) {
        if (i.files && i.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $("#imageFile").attr('src', e.target.result);
            }
            reader.readAsDataURL(i.files[0]);
        }
    }
    function deleteRow(btn) {
        $(btn).closest('tr').remove();
        updateCourseModuleIndex();
    }
    function deletewRow(btn) { // Corrected function name
        $(btn).closest('tr').remove();
        updateCourseModuleIndex();
    }
    function AddModule() {
        var lastIndex = parseInt($('#HIndex').val());
        var newRow = `
        <tr>
            <td>
                <input type="text" value="" class="form-control" name="CourseModules[${lastIndex}].ModuleName" />
            </td>
            <td>
                <input type="text" value="" class="form-control" name="CourseModules[${lastIndex}].Duration" />
            </td>
            <td>
                <button onclick="deletewRow(this)" type="button" class="btn btn-danger btn-sm">Delete</button>
            </td>
        </tr>
        `
        $("#ExTable tbody").append(newRow);
        $('#HIndex').val(lastIndex + 1);
        updateCourseModuleIndex();
    }
    function updateCourseModuleIndex() {
        $("#ExTable tbody tr").each(function (index) {
            $(this).find("input[name^='CourseModules']").each(function () {
                var name = $(this).attr("name");
                name = name.replace(/CourseModules\[\d+\]/, "CourseModules[" + index + "]");
                $(this).attr("name", name);
            });
        });
    }
</script>